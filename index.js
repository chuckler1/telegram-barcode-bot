const { Telegraf, Markup } = require('telegraf');
const config = require('./config');
const bwipjs = require('bwip-js');
const fs = require('fs');
const path = require('path');

// –°–æ–∑–¥–∞—ë–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
const bot = new Telegraf(config.BOT_TOKEN);

// –î–æ–±–∞–≤–ª—è–µ–º middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
bot.use((ctx, next) => {
  const messageText = ctx.message?.text || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
  console.log(
    `üì® –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: "${messageText}" –æ—Ç ${
      ctx.from?.first_name || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'
    }`
  );
  return next();
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
bot.start((ctx) => {
  ctx.reply(
    '–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —à—Ç—Ä–∏—Ö-–∫–æ–¥–æ–≤!',
    Markup.inlineKeyboard([
      [Markup.button.callback('–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —à—Ç—Ä–∏—Ö-–∫–æ–¥', 'GEN_BARCODE')],
      [Markup.button.callback('–ü–æ–º–æ—â—å', 'help')],
    ])
  );
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
bot.action('GEN_BARCODE', async (ctx) => {
  await ctx.answerCbQuery();
  ctx.reply('–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —à—Ç—Ä–∏—Ö-–∫–æ–¥–∞:');
});

bot.action('help', async (ctx) => {
  await ctx.answerCbQuery();
  ctx.reply(
    '–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞:\n\nüì± –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –ª—é–±–æ–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 123456789)'
  );
});

// –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —à—Ç—Ä–∏—Ö-–∫–æ–¥–∞
async function generateBarcode(text) {
  return await bwipjs.toBuffer({
    bcid: 'code128', // –¢–∏–ø —à—Ç—Ä–∏—Ö-–∫–æ–¥–∞
    text: text, // –¢–µ–∫—Å—Ç –¥–ª—è –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è
    scale: 5, // –£–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π –º–∞—Å—à—Ç–∞–± –¥–ª—è –ª—É—á—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞
    height: 15, // –£–≤–µ–ª–∏—á–µ–Ω–Ω–∞—è –≤—ã—Å–æ—Ç–∞
    includetext: true, // –í–∫–ª—é—á–∏—Ç—å —Ç–µ–∫—Å—Ç –ø–æ–¥ —à—Ç—Ä–∏—Ö-–∫–æ–¥–æ–º
    textxalign: 'center', // –í—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
    textsize: 12, // –†–∞–∑–º–µ—Ä —Ç–µ–∫—Å—Ç–∞
    textfont: 'Arial', // –®—Ä–∏—Ñ—Ç —Ç–µ–∫—Å—Ç–∞
    padding: 10, // –û—Ç—Å—Ç—É–ø—ã –≤–æ–∫—Ä—É–≥ —à—Ç—Ä–∏—Ö-–∫–æ–¥–∞
    backgroundcolor: 'FFFFFF', // –ë–µ–ª—ã–π —Ñ–æ–Ω
    barcolor: '000000', // –ß—ë—Ä–Ω—ã–µ –ø–æ–ª–æ—Å–∫–∏
    textcolor: '000000', // –ß—ë—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç
    sizelimit: '100x100', // –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä
    resolution: 300, // –í—ã—Å–æ–∫–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ (DPI)
  });
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on('text', async (ctx) => {
  const text = ctx.message.text.trim();

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–∏—Å–ª–æ–º
  if (/^\d+$/.test(text)) {
    try {
      ctx.reply('–ì–µ–Ω–µ—Ä–∏—Ä—É—é —à—Ç—Ä–∏—Ö-–∫–æ–¥...');

      const barcodeBuffer = await generateBarcode(text);
      const filename = `barcode_${text}_${Date.now()}.png`;
      const filepath = path.join(__dirname, filename);

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª –≤—Ä–µ–º–µ–Ω–Ω–æ
      fs.writeFileSync(filepath, barcodeBuffer);

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
      await ctx.replyWithPhoto(
        { source: filepath },
        {
          caption: `–®—Ç—Ä–∏—Ö-–∫–æ–¥ –¥–ª—è —á–∏—Å–ª–∞: ${text}`,
        }
      );

      // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
      fs.unlinkSync(filepath);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —à—Ç—Ä–∏—Ö-–∫–æ–¥–∞:', error);
      ctx.reply(
        '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —à—Ç—Ä–∏—Ö-–∫–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.'
      );
    }
  } else {
    // –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ —á–∏—Å–ª–æ, –æ—Ç–≤–µ—á–∞–µ–º –∫–∞–∫ –æ–±—ã—á–Ω–æ
    ctx.reply(`–í—ã –Ω–∞–ø–∏—Å–∞–ª–∏ –Ω–µ —á–∏—Å–ª–æ: "${text}". –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —á–∏—Å–ª–æ.`);
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
bot.catch((err, ctx) => {
  console.error(`‚ùå –û—à–∏–±–∫–∞ –¥–ª—è ${ctx.updateType}:`, err);
  console.error('üîç –î–µ—Ç–∞–ª–∏:', err.message);
});

// –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
console.log('üöÄ –ó–∞–ø—É—Å–∫–∞—é –±–æ—Ç–∞...');
console.log('üîë –¢–æ–∫–µ–Ω:', config.BOT_TOKEN.substring(0, 10) + '...');

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
bot.telegram
  .getMe()
  .then((botInfo) => {
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram API —É—Å–ø–µ—à–Ω–æ!');
    console.log('ü§ñ –ë–æ—Ç:', botInfo.first_name, `(@${botInfo.username})`);

    // –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
    return bot.launch();
  })
  .then(() => {
    console.log('ü§ñ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!');
    console.log('üì± –û—Ç–ø—Ä–∞–≤—å—Ç–µ –±–æ—Ç—É –ª—é–±–æ–µ —á–∏—Å–ª–æ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —à—Ç—Ä–∏—Ö-–∫–æ–¥–∞');
    console.log('‚èπÔ∏è  –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C');
  })
  .catch((err) => {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞:', err);
    console.error('üîç –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', err.message);
    if (err.code) {
      console.error('üìã –ö–æ–¥ –æ—à–∏–±–∫–∏:', err.code);
    }
    process.exit(1);
  });

// –í–∫–ª—é—á–∞–µ–º graceful stop
process.once('SIGINT', () => {
  console.log('\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏...');
  bot.stop('SIGINT');
  console.log('‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
  process.exit(0);
});

process.once('SIGTERM', () => {
  console.log('\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è...');
  bot.stop('SIGTERM');
  console.log('‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
  process.exit(0);
});
